<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Rapport du TP2</title>
        <link rel="stylesheet" type="text/css" href="rapport.css"/>
    </head>
    <body>
        <div id="header">
            <h1>Rapport du TP2 du cours IFT3225 Été 2016</h1>
            <div>
                <p>Nom: Charbel Kassis</p>
                <p>Matricule: p0976458</p>
                <p>Le rapport et le jeu ont été réalisés avec le logiciel oXygen XML Editor et le débuggeur de Google Chrome (F12) </p>
            </div>
        </div>          
        
        <div id="navWrapper">
           
            <div id="navigation">
             
                <ul>   
                     <li><a href="tp2.xhtml">Lien vers le jeu</a></li>
                     <li><a href="script.js">Lien vers script.js</a></li>
                     <li><a href="listener.js">Lien vers listener.js</a></li>
                     <li><a href="jeu.js">Lien vers jeu.js</a></li>
                     <li><a href="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js">Lien vers le jQuery</a></li>
                     <li><a href="style.css">Lien vers le CSS</a></li>
                    
                </ul>

            </div>
        
        </div>
        
        <div id="presentation"> 
            
            <h1>La structure du programme</h1>
            
            <p>Le programme est divisé en 6 fichiers: La page html tp2.xhtml, Le CSS style.css et les quatre scripts:</p>
            
            <ul>
                <li>script.js</li>
                <li>listener.js</li>
                <li>jeu.js</li>
                <li>jquery.min.js</li>
            </ul>
            
            
            <p>L'affichage du jeu se fait à traver un tableau de canvas. Chaque canvas dessine une sous-image de l'image chargée par l'URL</p>
            
            <div class="section">
                
                <h2> tp2.xhtml </h2>
                
                <p> tp2.xhtml contient uniquement le fieldset pour les inputs ainsi qu'une référence vers le CSS et les fichiers JavaScript. </p>
                
            </div>
            
            <div class="section">
                
                <h2> script.js </h2>
                
                <p> 
                    script.js est le script principale du programme. Tout d'abord, il charge l'image de l'URL, puis une fois l'image chargée, le script
                    initialise un tableau de canvas puis dessine les sous-images dans chacun des canvas. Ensuite, on fait appel aux méthodes du script listener.js pour
                    ajouter les écouteurs de cliques et touches clavier sur chacun des éléments respectifs. 
                </p>
                
                <p>Voici la forme qu'aura le tableau dans le code HTML:</p>
                
                <pre>
&lt;table&gt; 
                    
    ...
                    
    &lt;td&gt; 
                    
        &lt;tr id="0,3!"&gt;  
                    
            &lt;canvas id="1,3"/&gt; 
                    
        &lt;/tr&gt;
                    
    &lt;/td&gt;
                    
    ...
                    
&lt;/table&gt;                   
                    
                </pre>
                
                <p>
                    l'id du tr est de la forme "i,j!", l'id du canvas est de la forme "i,j". Initialement, le canvas et le td ont le meme i et j. i est la ligne, j est la colonne. L'id du canvas représente sa
                    position initiale. Les id du canvas et du td sont utilisés dans le calcul des déplacements dans le script listener.js.<br/><br/>
                    
                    Pour dessiner les sous-images, on utilise le i et le j de l'id du canvas
                    pour calculer la position de départ (sx , sy) dans l'image, plus spécifiquement sx = i*(hauteur d'un canvas) , sy = j*(largeur d'un canvas).<br/><br/>
                    
                    Or la largeur et la hauteur d'un canvas sont égales
                    à la (largeur de l'image)/(nombre de colonnes) et (hauteur de l'image)/(nombre de lignes) respectivement.<br/><br/>
                    
                    Finalement, la longeur et la largeur des sous images sont égales à la longeur et la largeur du canvas.
                    
                    Avec ces informations, il suffit d'appeler cette instruction sur le context graphique 2D de chacun des canvas:<br/><br/>
                    
                    <em><strong>drawImage(image,sx,sy,canvasWidth,canvasHeight,0,0,canvasWidth,canvasHeight)</strong></em>
                </p>
                
            </div>
            
            <div class="section">
                
                <h2> listener.js </h2>
                
                <p>
                    listener.js est le script qui s'occupe d'ajouter chacun des écouteurs de cliques et touches de clavier lorsque les fonctions sont appelées à partir de script.js.
                    De plus, le déroulement du jeu ainsi que le mélange des tuilles sont tous calculés dans ce script.
                    Pour calculer si un clique engendre un déplacement, le script listener.js se sert d'un objet Jeu qui se trouve dans le script jeu.js.
                    
                </p>
                
            </div>
            
            <div class="section">
                
                <h2> jeu.js </h2>
                
                <p>
                    jeu.js contient le code du constructeur d'objet Jeu. L'objet jeu a comme attributs 2 tableaux. L'un est le tableau this.jeuOriginal, qui montre l'état initial du jeu.
                    et this.jeu qui montre l'état courant du jeu . Initialement, les tableaux contiennent à position (i,j) les valeur "i,j" qui est aussi la forme de l'id d'un canvas.
                    l'objet jeu est utilisé principalement pour calculer la condition de victoire et à retrouver plus facilement les canvas qui sont adjacent à un canvas. 
                    A chaque déplacement, le tableau this.jeu est modifié.
                    
                </p>
                
            </div>
            
            <div class="section">
                
                <h2>jquery.min.js</h2>
                
                <p>
                    jquery.min.js est le framework jQuery. 
                </p>
                
            </div>
            
            <h1> Ce que j'ai appris </h1>
            
            <p> En faisant cet exercice, j'ai appris qu'il existe une différence entre un objet DOM html et un objet JQuery. Même si on retourne un élément par id, une requête jQuery retourne
            un objet jQuery qui encapsule un seul élément du DOM. Ceci était un problème lors du débugage, car, contrairement à un langage typé comme Java où ce genre d'erreur est détecté lors de la
            compilation, Javascript doit être exécuté afin de trouver les erreurs liées à un appel de méthode sur un objet. Plusieurs fois j'essayait d'appeler des méthodes du DOM html directement sur
            un objet jQuery et vice versa.</p>
            <p> De plus, j'ai appris que le processus de chargement d'une image dans un objet Image en Javascript se fait de façon asynchrome. Ceci m'avait beaucoup gêné au début, je me suis
            rendu compte qu'il fallait mettre la fonction principale du jeu dans le .onload de l'image, c'est à dire exécuter le code qui génère les tables de canvas puis ajouter les listeners après que l'image
            soit chargée en mémoire.</p>
            
        </div>
        
        <div id="footer">
            <p>
                <a href="http://validator.w3.org/check?uri=referer"><img
                    src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a>
            </p>
        </div>    
        
    </body>
</html>